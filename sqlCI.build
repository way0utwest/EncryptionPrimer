<?xml version="1.0" encoding="UTF-8"?>
<project name="sqlCI" default="sqlCI">

  <!-- sqlCI: Red Gate's SQL Continuous Integration -->


  <!-- Database folder path -->
  <!-- Required -->
  <!-- Path to the database folder in source control. If it is the build VCS root, then enter: . -->
  <property name="scriptsFolder" value="" />

  <!-- Database server -->
  <!-- Optional -->
  <!-- For example sql01.example.com\sql2008 -->
  <property name="databaseServer" value="" />

  <!-- Target database name -->
  <!-- Optional. Requires DatabaseServer if set -->
  <!-- The target database to keep up to date with the changes in source control. This must be an existing database on the server; the runner does not create the database for you. -->
  <property name="databaseName" value="" />

  <!-- Windows authentication -->
  <!-- Optional -->
  <!-- For Windows authentication, enter true. This uses the Windows account the build agents run under. For SQL authentication, enter false. -->
  <property name="databaseIntegratedAuthentication" value="" />

  <!-- SQL username -->
  <!-- Required if DatabaseServer is set and Windows authentication is false -->
  <property name="databaseUserName" value="" />

  <!-- SQL password -->
  <!-- Required if DatabaseServer is set and Windows authentication is false -->
  <property name="databasePassword" value="" />

  <!-- NuGet package name -->
  <!-- Optional. Requires PackageVersion if set -->
  <!-- Name of the NuGet package to create. -->
  <property name="packageId" value="" />

  <!-- Build number -->
  <!-- Required if PackageId is set -->
  <!-- On TeamCity, enter ${build.number}
On CruiseControl.NET, enter ${CCNetLabel}
If you are using a different build system, please email support@red-gate.com for help.
If you are using this through the command line, enter a number here to set the build number manually. -->
  <property name="packageVersion" value="" />

  <!-- NuGet API key -->
  <!-- Requires either PackageRepository or DeploymentManagerUrl and DeploymentManagerApiKey if set -->
  <!-- The API key of the NuGet Package Repository for publishing the package, for example: 00000000-0000-0000-0000-000000000000 -->
  <property name="apiKeyForPackagePublish" value="" />

  <!-- Generate a creation script -->
  <!-- Optional -->
  <!-- Enter true to generate a script that will create the source database. The script appears as a build artefact. -->
  <property name="generateCreationScript" value="" />

  <!-- Validate the creation script -->
  <!-- Optional. Requires DatabaseServer if true -->
  <!-- Enter true to create a test database with the creation script. Errors are reported in the build output. -->
  <property name="validateCreationScript" value="" />

  <!-- Prepare upgrade scripts for currently deployed versions -->
  <!-- Optional. Requires DeploymentManagerUrl if true -->
  <!-- To prepare upgrade scripts for versions currently deployed in Deployment Manager, enter true. -->
  <property name="generateUpgradeScriptForCurrentlyDeployedVersions" value="" />

  <!-- Prepare upgrade scripts for previous versions -->
  <!-- Optional. Requires DeploymentManagerUrl or PackageRepository if set -->
  <!-- Comma-separated list of production database NuGet versions to prepare upgrade scripts for. -->
  <property name="generateUpgradeScriptFor" value="" />

  <!-- Validate the upgrade script -->
  <!-- Optional. Requires DatabaseServer if true -->
  <!-- Enter true to upgrade a test database of the previous versions from Deployment Manager. Errors are reported in the build output. -->
  <property name="validateUpgradeScript" value="" />

  <!-- Package repository URL -->
  <!-- Either this or DeploymentManagerUrl is required if GenerateUpgradeScriptFor is set -->
  <!-- NuGet package repository URL for publishing and retrieving packages. For example: http://nuget.example.com/api/v2/ or http://buildserver.example.com/guestAuth/app/nuget/v1/FeedService.svc -->
  <property name="packageRepository" value="" />

  <!-- Deployment manager URL -->
  <!-- Either this or PackageRepository is required if GenerateUpgradeScriptFor or ApiKeyForPackagePublish is set. This is required if GenerateUpgradeScriptForCurrentlyDeployedVersions is true. -->
  <!-- URL of Red Gate Deployment Manager, for example: http://deploymentmanager.example.com/ -->
  <property name="deploymentManagerUrl" value="" />

  <!-- Deployment Manager server key -->
  <!-- Required if DeploymentManagerUrl is set -->
  <!-- The API key for Red Gate Deployment Manager. You can find this in your profile in the Deployment Manager UI. -->
  <property name="deploymentManagerApiKey" value="" />

  <!-- Populate database with test data -->
  <!-- Optional -->
  <!-- To populate the database with test data, enter the path to a SQL Data Generator project file. The path must be relative to the VCS root. -->
  <property name="sqlDataGeneratorProject" value="" />

  <!-- tSQLt tests -->
  <!-- Optional -->
  <!-- To run tSQLt tests in source control for the database, enter true. -->
  <property name="enableTsqlt" value="" />

  <!-- Generate database documentation -->
  <!-- Optional -->
  <!-- Enter the path to a SQL Doc project file. The path must be relative to the VCS root. -->
  <property name="sqlDocProject" value="" />

  <!-- SQL Compare command line arguments -->
  <!-- Optional -->
  <!-- Enter any SQL Compare command line arguments you want to use. For example /options:IgnoreWhiteSpace /include:Identical -->
  <property name="additionalCompareArgs" value="" />

  <!-- Automation license serial number -->
  <!-- Optional -->
  <!-- You can find your serial number on your invoice. If you do not enter a key, you will start a one month free trial. -->
  <property name="licenseSerialKey" value="" />

  <!-- Email address for updates -->
  <!-- Optional -->
  <!-- If you want to recieve email notifications about updates to the product, enter an email address. -->
  <property name="emailAddress" value="" />





  <!-- You shouldn't need to change anything after here. -->

  <property name="sqlCI" value="" />
  <property name="sqlCI" if="${scriptsFolder != ''}" value="${sqlCI} &quot;/scriptsFolder:${scriptsFolder}&quot;" />
  <property name="sqlCI" if="${databaseServer != ''}" value="${sqlCI} &quot;/databaseServer:${databaseServer}&quot;" />
  <property name="sqlCI" if="${databaseName != ''}" value="${sqlCI} &quot;/databaseName:${databaseName}&quot;" />
  <property name="sqlCI" if="${databaseIntegratedAuthentication != '' and databaseIntegratedAuthentication != '0' and databaseIntegratedAuthentication != 'false'}" value="${sqlCI} &quot;/databaseIntegratedAuthentication&quot;" />
  <property name="sqlCI" if="${databaseUserName != ''}" value="${sqlCI} &quot;/databaseUserName:${databaseUserName}&quot;" />
  <property name="sqlCI" if="${databasePassword != ''}" value="${sqlCI} &quot;/databasePassword:${databasePassword}&quot;" />
  <property name="sqlCI" if="${packageId != ''}" value="${sqlCI} &quot;/packageId:${packageId}&quot;" />
  <property name="sqlCI" if="${packageVersion != ''}" value="${sqlCI} &quot;/packageVersion:${packageVersion}&quot;" />
  <property name="sqlCI" if="${apiKeyForPackagePublish != ''}" value="${sqlCI} &quot;/apiKeyForPackagePublish:${apiKeyForPackagePublish}&quot;" />
  <property name="sqlCI" if="${generateCreationScript != '' and generateCreationScript != '0' and generateCreationScript != 'false'}" value="${sqlCI} &quot;/generateCreationScript&quot;" />
  <property name="sqlCI" if="${validateCreationScript != '' and validateCreationScript != '0' and validateCreationScript != 'false'}" value="${sqlCI} &quot;/validateCreationScript&quot;" />
  <property name="sqlCI" if="${generateUpgradeScriptForCurrentlyDeployedVersions != '' and generateUpgradeScriptForCurrentlyDeployedVersions != '0' and generateUpgradeScriptForCurrentlyDeployedVersions != 'false'}" value="${sqlCI} &quot;/generateUpgradeScriptForCurrentlyDeployedVersions&quot;" />
  <property name="sqlCI" if="${generateUpgradeScriptFor != ''}" value="${sqlCI} &quot;/generateUpgradeScriptFor:${generateUpgradeScriptFor}&quot;" />
  <property name="sqlCI" if="${validateUpgradeScript != '' and validateUpgradeScript != '0' and validateUpgradeScript != 'false'}" value="${sqlCI} &quot;/validateUpgradeScript&quot;" />
  <property name="sqlCI" if="${packageRepository != ''}" value="${sqlCI} &quot;/packageRepository:${packageRepository}&quot;" />
  <property name="sqlCI" if="${deploymentManagerUrl != ''}" value="${sqlCI} &quot;/deploymentManagerUrl:${deploymentManagerUrl}&quot;" />
  <property name="sqlCI" if="${deploymentManagerApiKey != ''}" value="${sqlCI} &quot;/deploymentManagerApiKey:${deploymentManagerApiKey}&quot;" />
  <property name="sqlCI" if="${sqlDataGeneratorProject != ''}" value="${sqlCI} &quot;/sqlDataGeneratorProject:${sqlDataGeneratorProject}&quot;" />
  <property name="sqlCI" if="${enableTsqlt != '' and enableTsqlt != '0' and enableTsqlt != 'false'}" value="${sqlCI} &quot;/enableTsqlt&quot;" />
  <property name="sqlCI" if="${sqlDocProject != ''}" value="${sqlCI} &quot;/sqlDocProject:${sqlDocProject}&quot;" />
  <property name="sqlCI" if="${additionalCompareArgs != ''}" value="${sqlCI} &quot;/additionalCompareArgs:${additionalCompareArgs}&quot;" />
  <property name="sqlCI" if="${licenseSerialKey != ''}" value="${sqlCI} &quot;/licenseSerialKey:${licenseSerialKey}&quot;" />
  <property name="sqlCI" if="${emailAddress != ''}" value="${sqlCI} &quot;/emailAddress:${emailAddress}&quot;" />
  <target name="sqlCI">
    <fail if="${sqlCI == ''}" message="You have to edit the variables at the top of the sqlCI.build script" />
    <echo message="Starting: sqlCI.exe ${sqlCI}" />
    <exec program="sqlCI.exe" commandline="${sqlCI}">
      <environment>
        <variable name="REDGATE_SEND_ERROR_REPORTS" value="true" /> <!-- delete this line if you don't want to send us error reports -->
      </environment>
    </exec>
  </target>

</project>
